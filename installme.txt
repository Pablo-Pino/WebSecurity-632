PRIMEROS PASOS

Aquí se explica como iniciar el proyecto, comenzando desde un entorno lomás básico posible y terminando con una ejecución correcta de la aplicación. Se debe tener en cuenta que se asume que se usa el sistema operativo Ubuntu 18.10 y se tiene instalado Python 3. Se detalla el procedimiento necesario a continuación :


	INSTALACIÓN DE GIT Y DESCARGA DEL PROYECTO

Primero, hay que obtener el proyecto, el cual está alojado en los repositorios de GitHub y para acceder al mismo necesitamos el programa Git.

1. Se instala el programa de gestión de versiones Git, usando para ello los siguientes comandos
	1. sudo apt update
	2. sudo apt install git

2. Se descarga el proyecto a través de GitHub, siendo la URL del repositorio la siguiente :
	1. https://github.com/Pablo-Pino/WebSecurity-632.git
	2. Se usa el siguiente comando :
		1. git clone https://github.com/Pablo-Pino/WebSecurity-632.git
	3. Se accede al interior del directorio del proyecto mediante el siguiente comando :
		1. cd WebSecurity-632


	INSTALACIÓN DE DEPENDENCIAS DE PYTHON Y DJANGO

A continuación, hay que instalar aquellas librerías que añaden a la base Python la funcionalidad necesaria para hacer funcionar el proyecto. Para instalar estas librerías se necesita el programa Pip.

4. A continuación se instala el gestor de paquetes de Python, pip, usando el siguiente comando :
	1. sudo apt install python3-pip
5. Se usa pip para instalar las bibliotecas Python necesarias para el proyecto, para ello se ejecuta el siguiente comando :
	1. sudo -H pip3 install -r requirements.txt

	
	INSTALACIÓN DE NPM Y JQUERY

Ahora, se necesta instalar la librería JavaScript JQuery, para lo que se necesita el programa npm.

6. Se usa el siguiente comando para instalar el gestor de paquetes de Node.js npm :
	1. sudo apt install npm
7. Se usa el siguiente comando para instalar la versión de JQuery que usa el proyecto.
	1. sudo npm install jquery@3.4.1


	INSTALACIÓN DE POSTGRESQL Y CREACIÓN Y GESTIÓN DE LA BASE DE DATOS

En esta sección, se llevará a cabo la instalación y gestión de la base de datos del proyecto.

8. Se instala la base de datos PostgreSQL.
	1. Se usa el comando apt update para actualizar los repositorios de losprogramas de Ubuntu. El comando completo es :
		1. sudo apt update
	2. Se usa el comando apt install para instalar PostgreSQL. El comando completo es :
		1. sudo apt install postgresql postgresql-contrib
9. Una vez instalado el programa PostgreSQL, se procede a iniciarlo para crear la base de datos.
	1. Al instalar la base de datos, PostgreSQL ha creado un usuario, llamado postgres, con los permisos necesarios para usar el programa. 		Por ello, se autentica como dicho usuario con el siguiente comando :
		1. sudo -i -u postgres
10. Antes de crear la base de datos, se debe tener en cuenta cual debe ser el nombre de la base de datos y qué usuario la va a emplear, para lo que se accede al fichero settings.py del proyecto.
11. Una vez hemos recogido los datos necesarios en el paso anterior, accedemos a la consola de PostgreSQL, empleando el comando :
	1. psql
12. Ahora se crea la base de datos del proyecto usando el comando :
	1. create database websecurityapp;
13. Ahora se crea el usuario de la base de datos del proyecto, para lo que se usa el comando :
	1. create user root with encrypted password ‘root’;
14. Ahora se da los permisos necesarios al usuario creado sobre la base de datos del proyecto, usando el comando :
	1. grant all privileges on database websecurityapp to root;
15. Con esto, la conexión entre el servidor y la base de datos debería estar resuelta. Se sale de la consola de la base de datos usando el comando :
	1. \q
16. Se cierra la sesión de administrador usando el comando:
	1. exit


	APLICACIÓN DE LOS MODELOS DJANGO-PYTHON EN LA BASE DE DATOS

A continuación, se pasan las estructuras de datos implementadas en el proyecto a la base de datos.

17. A continuación, se van a pasar los modelos Django-Python a tablas SQL. Para ello, en el directorio del proyecto,, se ejecutan los siguientes comandos:
	1. python3 manage.py makemigrations
	2. python3 manage.py migrate


	POPULACIÓN DE LA BASE DE DATOS

Aquí se explica como generar las instancias que conforman el entorno inicial del proyecto, en el que se podrá probar inmediatamente la mayor parte de sus funcionalidades.

18. Ahora, se va a popular la base de datos del proyecto, para ello, se va a ejecutar un script Python que va a inicializar y guardar las entidades iniciales del proyecto. Para ello, en el directorio del proyecto, se debe ejecutar el siguiente comando :
	1. python3 manage.py shell
19. Una vez se ha abierto la consola del servidor Django, se ejecuta el fichero de populación a través de dicha consola, empleando el comando :
	1. exec(open(‘./populate_database.py’).read())
20. Tras ejecutar el comando, se cierra la consola de Django pulsando las teclas Ctrl + D.


	INICIO DEL SERVIDOR

Por último, en esta sección se indica como iniciar el servidor una vez se ha realizado toda la configuración necesaria.

21. De nuevo, en el directorio del proyecto, se ejecuta el siguiente comando por
consola :
	1. python3 manage.py runserver
22. Se abre el navegador y se comprueba que el servidor está en marcha en la
dirección :
	1. http://localhost.com:8000/
23. Con todo esto, está todo listo para poder usar el servidor y probar la aplicación.





EJECUCIÓN DE TESTS Y COVERAGE

En esta sección se indican los pasos necesarios para realizar los tests tanto unitarios como e2e, además de extraer un informe de la cobertura ofrecida por los mismos.


	COMO EJECUTAR TESTS

En esta sección se indican los pasos que se deben realizar para ejecutar los tests, tanto unitarios como e2e, programados mediante Django-Python.

1. Dar al usuario permisos para crear la base de datos de tests. Para ello, se deben seguir los siguientes pasos
	1. Entrar en la consola del sistema e iniciar sesión como el usuario administrador de PostgreSQL e iniciar el programa. Para ellos se 		debe usar los siguientes comandos :
		1. sudo -i -u postgres
		2. psql
	2. Una vez en la consola de PostgreSQL, se debe ejecutar el siguiente comando para dar al usuario correspondiente, indicado en el 		fichero settings.py del proyecto, el permiso necesario para crear bases de datos, el cual es :
		1. alter user <nombre del usuario> createdb.
	3. Cerrar sesión en la consola de PostgreSQL y, posteriormente, cerrar sesión como el usuario postgres usando ellos siguientes 		comandos :
		1. \q
		2. exit
2. Añadir la ruta del directorio geckodriver-v0.26.0-linux64 a la variable $PATH del sistema para que Django pueda encontrar el driver geckodriver, necesario para ejecutar los tests relacionados con Selenium. Para ello, se van a seguir los siguientes pasos :
	1. Acceder a la carpeta del usuario, la cual responde a la ruta /home/<nombre del usuario>/.
	2. Para ver los ficheros ocultos se van a presionar las teclas Ctrl + H.
	3. Abrir el fichero .profile y añadir al final del mismo la siguiente línea :
		1. $PATH = “$PATH:$HOME/WebSecurity-632/geckodriver-v0.26.0-linux64”
	4. Para que finalmente se añada esta modificación a la variable $PATH, se
	debe de reiniciar el sistema.
3. Abrir la consola del sistema y dirigirse al directorio del proyecto. Para ello se
puede usar el siguiente comando :
	1. cd ~/WebSecurity-632
4. Crear el archivo JSON con los datos iniciales necesarios para los tests e2e y el
correcto funcionamiento de Selenium.
	1. Para crear el JSON se usa el siguiente comando :
		1. django-admin dumpdata --settings=websecurityserver.settings 
		--output=<insertar ruta absoluta del directorio del proyecto>/dumpdata.json --natural-foreign –natural-primary
	2. Sólo es necesario ejecutar el comendo anterior si se ha realizado un cambio sobre los contenidos de la base de datos, puesto a que 		el fichero dumpdata.json generado que trae el proyecto ya tiene los datos actualizados.
5. Ejecutar en la consola el siguiente comando, el cual indica a Django que debe ejecutar los tests que encuentre en los directorios test_unit y test_selenium :
	1. python3 manage.py test websecurityapp.test_unit websecurityapp.test_selenium


	COMO EJECUTAR TESTS CON COVERAGE Y OBTENER EL INFORME DE COBERTURA A TRAVÉS DE COVERAGE

En esta sección se indica cómo obtener un informe de la cobertura de los tests del proyecto.

1. Abrir la consola del sistema y acceder al directorio del proyecto. Para ello se puede usar el siguiente comando :
	1. cd ~/WebSecurity-632
2. Ejecutar el comando para ejecutar los test y obtener la coberrtura, para ello se debe usar el siguiente comando, el cual se encarga tanto de ejecutar los tests como de obtener la cobertura :
	1. coverage run manage.py test websecurityapp.test_unit websecurityapp.test_selenium
3. Ejecutar uno de los siguientes comandos para obtener un reporte de coverage en la consola, siendo la diferrencia entre ambos que el primero lo muestra directamente en la consola del sistema y el segundo genera una serie de ficheros que permite ver diversos informes que pueden verse mediante un navegador web :
	1. coverage report
	2. coverage html
4. En el caso en que se use el comando “coverage html”, el sistema creará una carpeta llamada htmlcov dentro de la ubicación en la que se ha ejecutado el comando, dentro de la cual se hallan varios ficheros HTML. Se nota que, además de un fichero index.html hay un fichero HTML para cada fichero evaluado por coverage. El fichero index.html, contiene el resumen del informe de cobertura, mientras que los otros ficheros muestran cuáles líneas han sido cubiertas y cuáles no.




